{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVoD;AACO;AAC3D;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA,uBAAuB,2DAAoB;AAC3C;AACA,uBAAuB,8DAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxBiD;AACG;AACpD;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAiB;AACvC;AACA,sBAAsB,2DAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzBe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;ACbe;AACf;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;UCbA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNkE;AACA;AACG;AACrE;AACA;AACA;AACA,eAAe,oEAAyB;AACxC;AACA,2CAA2C,yEAAuB;AAClE;AACA;AACA,mBAAmB,oEAAyB;AAC5C;AACA;AACA;AACA;AACA","sources":["webpack://practicalwor_3_s-blocks_and_p-blocks/../../Lecture \u0000#3. Симетричне шифрування. Компоненти сучасних алгоритмів шифрування/PracticalWork\u0000#3_blocks/js/modules/cryptFromBinToStr.js","webpack://practicalwor_3_s-blocks_and_p-blocks/../../Lecture \u0000#3. Симетричне шифрування. Компоненти сучасних алгоритмів шифрування/PracticalWork\u0000#3_blocks/js/modules/fromBinToStr.js","webpack://practicalwor_3_s-blocks_and_p-blocks/../../Lecture \u0000#3. Симетричне шифрування. Компоненти сучасних алгоритмів шифрування/PracticalWork\u0000#3_blocks/js/modules/fromStrToBin.js","webpack://practicalwor_3_s-blocks_and_p-blocks/../../Lecture \u0000#3. Симетричне шифрування. Компоненти сучасних алгоритмів шифрування/PracticalWork\u0000#3_blocks/js/modules/revTransPblock.js","webpack://practicalwor_3_s-blocks_and_p-blocks/../../Lecture \u0000#3. Симетричне шифрування. Компоненти сучасних алгоритмів шифрування/PracticalWork\u0000#3_blocks/js/modules/shiftSblock.js","webpack://practicalwor_3_s-blocks_and_p-blocks/../../Lecture \u0000#3. Симетричне шифрування. Компоненти сучасних алгоритмів шифрування/PracticalWork\u0000#3_blocks/js/modules/transPblock.js","webpack://practicalwor_3_s-blocks_and_p-blocks/webpack/bootstrap","webpack://practicalwor_3_s-blocks_and_p-blocks/webpack/runtime/define property getters","webpack://practicalwor_3_s-blocks_and_p-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://practicalwor_3_s-blocks_and_p-blocks/webpack/runtime/make namespace object","webpack://practicalwor_3_s-blocks_and_p-blocks/../../Lecture \u0000#3. Симетричне шифрування. Компоненти сучасних алгоритмів шифрування/PracticalWork\u0000#3_blocks/js/script.js"],"sourcesContent":["export default function cryptFromBinaryToString(input) { \r\n    input = input.replaceAll(' ', '');\r\n    let strResult = '';\r\n    \r\n    for (let i = 0; i < input.length - 1; i = i + 8) {\r\n        const sBlock = input.slice(i, i + 8);\r\n        strResult += String.fromCharCode(parseInt(sBlock, 2));\r\n    }\r\n\r\n    return strResult.split('').join('').trim(); \r\n}","import cyclicShiftOperation from './shiftSblock.js';\r\nimport reversePermutationPblock from './revTransPblock.js';\r\n\r\nexport default function convertfromBinaryToString(input) { \r\n    input = input.replaceAll(' ', '');\r\n    let strResult = '';\r\n    let orgBinArr = [];\r\n    let pblockArr = [];\r\n    let sblockArr = [];\r\n    \r\n    for (let i = 0; i < input.length - 1; i = i + 8) {\r\n        sblockArr.push(input.slice(i, i + 8));\r\n        const sBlock = cyclicShiftOperation(input.slice(i, i + 8));\r\n        pblockArr.push(sBlock);\r\n        const result = reversePermutationPblock(sBlock);\r\n        orgBinArr.push(result);\r\n        strResult += String.fromCharCode(parseInt(result, 2));\r\n    }\r\n\r\n    console.log('S-blocks binary array:: ', sblockArr);\r\n    console.log('P-blocks binary array: ', pblockArr);\r\n    console.log('Original binary array: ', orgBinArr);\r\n\r\n    return strResult.split('').join('').trim(); \r\n}","import permutationPblock from './transPblock.js';\r\nimport cyclicShiftOperation from './shiftSblock.js';\r\n\r\nexport default function convertFromStringToBinary(input) { \r\n    let binaryResult = '';\r\n    let orgBinArr = [];\r\n    let pblockArr = [];\r\n    let sblockArr = [];\r\n    \r\n    for (const char of input) {\r\n        const codePoint = char.codePointAt(0);\r\n        let binaryValue = codePoint.toString(2);\r\n        orgBinArr.push(binaryValue.padStart(8, '0'));\r\n        binaryValue = permutationPblock(binaryValue.padStart(8, '0'));\r\n        pblockArr.push(binaryValue);\r\n        binaryValue = cyclicShiftOperation(binaryValue);\r\n        sblockArr.push(binaryValue);\r\n        binaryResult += binaryValue + ' ';\r\n    }\r\n    \r\n    console.log('Original binary array: ', orgBinArr);\r\n    console.log('P-blocks binary array: ', pblockArr);\r\n    console.log('S-blocks binary array: ', sblockArr);\r\n\r\n    return binaryResult.trim();\r\n}","export default function  reversePermutationPblock(input) {\r\n    let strToArr = input.split('');\r\n    let arrToStr = [];\r\n\r\n    strToArr.forEach((el, i) => {\r\n        if (i === 2 || i === 3 || i === 6 || i === 7) {\r\n            arrToStr[i - 2] = strToArr[i];\r\n        } else {\r\n            arrToStr[i + 2] = strToArr[i];\r\n        }\r\n    });\r\n\r\n    return arrToStr.join('');\r\n}","export default function cyclicShiftOperation(input) {\r\n    let newArr = [];\r\n\r\n    for (let i = 0; i < input.length; i = i + 4) {\r\n        newArr.push(input.slice(i, i + 4));\r\n    }\r\n\r\n    return newArr.reverse().join('');\r\n}","export default function  permutationPblock(input) {\r\n    let strToArr = input.split('');\r\n    let arrToStr = [];\r\n\r\n    strToArr.forEach((el, i) => {\r\n        if (i === 0 || i === 1 || i === 4 || i === 5) {\r\n            arrToStr[i + 2] = strToArr[i];\r\n        } else {\r\n            arrToStr[i - 2] = strToArr[i];\r\n        }\r\n    });\r\n\r\n    return arrToStr.join('');\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import convertFromStringToBinary from './modules/fromStrToBin.js';\r\nimport convertfromBinaryToString from './modules/fromBinToStr.js';\r\nimport cryptFromBinaryToString from './modules/cryptFromBinToStr.js';\r\n\r\nconst inputText = prompt('Please enter the data:');\r\n\r\nconst binary = convertFromStringToBinary(inputText);\r\nconsole.log('inputText: ', inputText);\r\nconsole.log('Entered text is encrypted: ', cryptFromBinaryToString(binary));\r\nconsole.log('\\n');\r\n\r\nconst outputText = convertfromBinaryToString(binary);\r\nconsole.log('outputText: ', outputText);\r\nconsole.log('\\n');\r\n\r\nconsole.log('inputText = outputText ? ', inputText === outputText);\r\n\r\n"],"names":[],"sourceRoot":""}