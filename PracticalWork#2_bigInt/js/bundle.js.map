{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAgE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA,6CAA6C,iBAAiB;AAC9D,+EAA+E;AAC/E,0DAA0D,iBAAiB,IAAI;AAC/E;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA,6CAA6C,iBAAiB;AAC9D;AACA,0DAA0D,iBAAiB;AAC3E;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA,6CAA6C,iBAAiB;AAC9D;AACA,0DAA0D,iBAAiB;AAC3E;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA,6CAA6C,iBAAiB;AAC9D;AACA,0DAA0D,iBAAiB;AAC3E;AACA,kBAAkB,kBAAkB;AACpC;;;;;;;UCzKA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN2C;AAC3C;AACA;AACA,oBAAoB,0DAAQ;AAC5B,oBAAoB,0DAAQ;AAC5B,oBAAoB,0DAAQ;AAC5B;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA,0CAA0C,iBAAiB;AAC3D,4EAA4E;AAC5E,uDAAuD,iBAAiB,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA,0CAA0C,iBAAiB;AAC3D;AACA,uDAAuD,iBAAiB;AACxE;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA,0CAA0C,iBAAiB;AAC3D;AACA,uDAAuD,iBAAiB;AACxE;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA,0CAA0C,iBAAiB;AAC3D;AACA,uDAAuD,iBAAiB;AACxE;AACA,eAAe,kBAAkB;AACjC;AACA;AACA","sources":["webpack://bigint/../../../Lecture \u0000#2. Геш-функції/drafts/bigInt/js/modules/bigInt.js","webpack://bigint/webpack/bootstrap","webpack://bigint/webpack/runtime/define property getters","webpack://bigint/webpack/runtime/hasOwnProperty shorthand","webpack://bigint/webpack/runtime/make namespace object","webpack://bigint/../../../Lecture \u0000#2. Геш-функції/drafts/bigInt/js/script.js"],"sourcesContent":["export default class MyBigInt {\r\n// class MyBigInt {\r\n    // Creating a master field of our own data type for large numbers \r\n    constructor() {\r\n        this.values = [];\r\n    }\r\n    \r\n    // Retrieving a previously stored hexadecimal number\r\n    getHex() {\r\n        return this.createHexStr();\r\n    }\r\n\r\n    // Storage of a sixteen-year number\r\n    setHex(hexString) {\r\n        // console.log(`You entered a hexString: ${hexString}`);\r\n        // console.log('\\n');\r\n        this.createIntArr(hexString);\r\n        return this.createHexStr();\r\n    }\r\n\r\n    // A function to create an array of unsigned integers (32 bits) for storing large numbers\r\n    createIntArr(str) {\r\n        this.values = [];\r\n        str = str.toLowerCase();\r\n\r\n        for (let i = str.length - 1; i >= 0; i -= 8) {\r\n            const chunk = str.slice(Math.max(0, i - 7), i + 1);\r\n            this.values.push(parseInt(chunk, 16) >>> 0); // Ensure 32-bit unsigned integers\r\n        }    \r\n    }\r\n\r\n    // Obtaining a hexadecimal number as a string from an array of unsigned integers\r\n    createHexStr() {\r\n        return this.values.map(value => value.toString(16).padStart(8, '0')).reverse().join('');\r\n    }\r\n\r\n    // Perform bitwise inversion\r\n    inv() {\r\n        const result = new MyBigInt();\r\n        result.values = this.values.map(value => ~value >>> 0);\r\n        return result;\r\n    }\r\n    \r\n    // Perform bitwise XOR\r\n    xor(other) {\r\n        const result = new MyBigInt();\r\n        result.values = this.values.map((value, index) => (value ^ other.values[index]) >>> 0);\r\n        return result;\r\n    }\r\n    \r\n    // Perform bitwise OR\r\n    or(other) {\r\n        const result = new MyBigInt();\r\n        result.values = this.values.map((value, index) => (value | other.values[index]) >>> 0);\r\n        return result;\r\n    }\r\n\r\n    // Perform bitwise AND\r\n    and(other) {\r\n        const result = new MyBigInt();\r\n        result.values = this.values.map((value, index) => (value & other.values[index]) >>> 0);\r\n        return result;\r\n    }\r\n    \r\n    // Perform right shift by n bits\r\n    shiftR(n) {\r\n        const result = new MyBigInt();\r\n        result.values = this.values.map(value => value >>> n);\r\n        return result;\r\n    }\r\n    \r\n    // Perform left shift by n bits\r\n    shiftL(n) {\r\n        const result = new MyBigInt();\r\n        result.values = this.values.map(value => (value << n) >>> 0);\r\n        return result;\r\n    }\r\n\r\n    // Task #3\r\n    // Perform addition with another MyBigInt\r\n    add(other) {\r\n        const result = new MyBigInt();\r\n        let carry = 0;\r\n\r\n        for (let i = 0; i < Math.max(this.values.length, other.values.length) || carry; i++) {\r\n            const sum = (this.values[i] >>> 0) + (other.values[i] >>> 0) + carry;\r\n            result.values.push((sum & 0xFFFFFFFF) >>> 0);\r\n            carry = (sum > 0xFFFFFFFF) ? 1 : 0;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Perform subtraction with another MyBigInt\r\n    sub(other) {\r\n        const result = new MyBigInt();\r\n        let borrow = 0;\r\n\r\n        for (let i = 0; i < this.values.length || borrow; i++) {\r\n            const diff = (this.values[i] >>> 0) - (other.values[i] >>> 0) - borrow;\r\n            result.values.push(diff >>> 0);\r\n            borrow = (diff < 0) ? 1 : 0;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Perform modulo operation with another MyBigInt\r\n    mod(other) {\r\n        let dividend = this.values;\r\n        console.log('dividend: ', dividend);\r\n\r\n        while (dividend.compare(other) >= 0) {\r\n            dividend = dividend.sub(other);\r\n        }\r\n\r\n        return dividend;\r\n    }\r\n}\r\n\r\n// // Create variables\r\n// const numberA = new MyBigInt();\r\n// const numberB = new MyBigInt();\r\n// const numberC = new MyBigInt();\r\n\r\n// // Task #2.2. Implementation of bitwise operations\r\n// console.log('Task #2.2. Bitwise operations');\r\n// numberA.setHex('e035c6cfa42609b998b883bc1699df885cef74e2b2cc372eb8fa7e7');\r\n// console.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\n// numberB.setHex('072f028943e0fd5fab3273782de14b1011741bd0c5cd6ba6474330');\r\n// console.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\n// numberC.setHex(numberA.xor(numberB).getHex());                              // numberC = XOR(numberA, numberB)\r\n// console.log(`The result of the XOR(numberA, numberB) ${numberC.getHex()}`); // print(numberC.getHex())                                       \r\n\r\n// // Task #2.3. Implementation of arithmetic operations \r\n// // Let's check the execution of the XOR operation\r\n// console.log('Task #2.3. Check the execution of the XOR operation');\r\n// numberA.setHex('51bf608414ad5726a3c1bec098f77b1b54ffb2787f8d528a74c1d7fde6470ea4');\r\n// console.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\n// numberB.setHex('403db8ad88a3932a0b7e8189aed9eeffb8121dfac05c3512fdb396dd73f6331c');\r\n// console.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\n// numberC.setHex(numberA.xor(numberB).getHex());\r\n// console.log(`The result of the XOR(numberA, numberB) ${numberC.getHex()}`);\r\n// console.log('Comparison with the given answer:');\r\n// console.log(`${numberC.getHex()} === 1182d8299c0ec40ca8bf3f49362e95e4ecedaf82bfd167988972412095b13db8`);\r\n// console.log('Result: ', numberC.getHex() === '1182d8299c0ec40ca8bf3f49362e95e4ecedaf82bfd167988972412095b13db8');\r\n\r\n// // Let's check the execution of the ADD operation\r\n// console.log('Task #2.3. Check the execution of the ADD operation');\r\n// numberA.setHex('36f028580bb02cc8272a9a020f4200e346e276ae664e45ee80745574e2f5ab80');\r\n// console.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\n// numberB.setHex('70983d692f648185febe6d6fa607630ae68649f7e6fc45b94680096c06e4fadb');\r\n// console.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\n// numberC.setHex(numberA.add(numberB).getHex());\r\n// console.log(`The result of the ADD(numberA, numberB) ${numberC.getHex()}`);\r\n// console.log('Comparison with the given answer:');\r\n// console.log(`${numberC.getHex()} === a78865c13b14ae4e25e90771b54963ee2d68c0a64d4a8ba7c6f45ee0e9daa65b`);\r\n// console.log('Result: ', numberC.getHex() === 'a78865c13b14ae4e25e90771b54963ee2d68c0a64d4a8ba7c6f45ee0e9daa65b');\r\n\r\n// // Let's check the execution of the SUB operation\r\n// console.log('Task #2.3. Check the execution of the SUB operation');\r\n// numberA.setHex('33ced2c76b26cae94e162c4c0d2c0ff7c13094b0185a3c122e732d5ba77efebc');\r\n// console.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\n// numberB.setHex('22e962951cb6cd2ce279ab0e2095825c141d48ef3ca9dabf253e38760b57fe03');\r\n// console.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\n// numberC.setHex(numberA.sub(numberB).getHex());\r\n// console.log(`The result of the ADD(numberA, numberB) ${numberC.getHex()}`);\r\n// console.log('Comparison with the given answer:');\r\n// console.log(`${numberC.getHex()} === 10e570324e6ffdbc6b9c813dec968d9bad134bc0dbb061530934f4e59c2700b9`);\r\n// console.log('Result: ', numberC.getHex() === '10e570324e6ffdbc6b9c813dec968d9bad134bc0dbb061530934f4e59c2700b9');\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import MyBigInt from './modules/bigInt.js';\r\n\r\n// Create variables\r\nconst numberA = new MyBigInt();\r\nconst numberB = new MyBigInt();\r\nconst numberC = new MyBigInt();\r\n\r\n// Task #2.2. Implementation of bitwise operations\r\nconsole.log('Task #2.2. Bitwise operations');\r\nnumberA.setHex('e035c6cfa42609b998b883bc1699df885cef74e2b2cc372eb8fa7e7');\r\nconsole.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\nnumberB.setHex('072f028943e0fd5fab3273782de14b1011741bd0c5cd6ba6474330');\r\nconsole.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\nnumberC.setHex(numberA.xor(numberB).getHex());                              // numberC = XOR(numberA, numberB)\r\nconsole.log(`The result of the XOR(numberA, numberB) ${numberC.getHex()}`); // print(numberC.getHex())                                       \r\n\r\n// Task #2.3. Implementation of arithmetic operations \r\n// Let's check the execution of the XOR operation\r\nconsole.log('Task #2.3. Check the execution of the XOR operation');\r\nnumberA.setHex('51bf608414ad5726a3c1bec098f77b1b54ffb2787f8d528a74c1d7fde6470ea4');\r\nconsole.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\nnumberB.setHex('403db8ad88a3932a0b7e8189aed9eeffb8121dfac05c3512fdb396dd73f6331c');\r\nconsole.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\nnumberC.setHex(numberA.xor(numberB).getHex());\r\nconsole.log(`The result of the XOR(numberA, numberB) ${numberC.getHex()}`);\r\nconsole.log('Comparison with the given answer:');\r\nconsole.log(`${numberC.getHex()} === 1182d8299c0ec40ca8bf3f49362e95e4ecedaf82bfd167988972412095b13db8`);\r\nconsole.log('Result: ', numberC.getHex() === '1182d8299c0ec40ca8bf3f49362e95e4ecedaf82bfd167988972412095b13db8');\r\n\r\n// Let's check the execution of the ADD operation\r\nconsole.log('Task #2.3. Check the execution of the ADD operation');\r\nnumberA.setHex('36f028580bb02cc8272a9a020f4200e346e276ae664e45ee80745574e2f5ab80');\r\nconsole.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\nnumberB.setHex('70983d692f648185febe6d6fa607630ae68649f7e6fc45b94680096c06e4fadb');\r\nconsole.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\nnumberC.setHex(numberA.add(numberB).getHex());\r\nconsole.log(`The result of the ADD(numberA, numberB) ${numberC.getHex()}`);\r\nconsole.log('Comparison with the given answer:');\r\nconsole.log(`${numberC.getHex()} === a78865c13b14ae4e25e90771b54963ee2d68c0a64d4a8ba7c6f45ee0e9daa65b`);\r\nconsole.log('Result: ', numberC.getHex() === 'a78865c13b14ae4e25e90771b54963ee2d68c0a64d4a8ba7c6f45ee0e9daa65b');\r\n\r\n// Let's check the execution of the SUB operation\r\nconsole.log('Task #2.3. Check the execution of the SUB operation');\r\nnumberA.setHex('33ced2c76b26cae94e162c4c0d2c0ff7c13094b0185a3c122e732d5ba77efebc');\r\nconsole.log(`You entered a hex numberA: ${numberA.getHex()}`);\r\nnumberB.setHex('22e962951cb6cd2ce279ab0e2095825c141d48ef3ca9dabf253e38760b57fe03');\r\nconsole.log(`You entered a hex numberB: ${numberB.getHex()}`);\r\nnumberC.setHex(numberA.sub(numberB).getHex());\r\nconsole.log(`The result of the ADD(numberA, numberB) ${numberC.getHex()}`);\r\nconsole.log('Comparison with the given answer:');\r\nconsole.log(`${numberC.getHex()} === 10e570324e6ffdbc6b9c813dec968d9bad134bc0dbb061530934f4e59c2700b9`);\r\nconsole.log('Result: ', numberC.getHex() === '10e570324e6ffdbc6b9c813dec968d9bad134bc0dbb061530934f4e59c2700b9');\r\n\r\n\r\n"],"names":[],"sourceRoot":""}